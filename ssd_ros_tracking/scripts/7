#!/usr/bin/env python
# coding:utf-8

import rospy
import cv2
import math
import numpy as np
import sys

from ssd_overlap import *

from sensor_msgs.msg import Image
from cv_bridge import CvBridge
from ssd_ros_msgs.msg import BoundingBox
from ssd_ros_msgs.msg import BoundingBoxArray

MAX_MISS_FRAME = 20
MIN_NEW_DETECT_INTERSECTION_RATE = 0.5

class BboxClass:
    def __init__(self, data, frame, id):
        self.data = data
        self.id = id
        self.tracker = cv2.TrackerMedianFlow_create()
        self.n_miss_frame = 0
        self.n_miss_match = 0
        self.bbox = (data.xmin, data.ymin, data.xmax, data.ymax)
        self.ok = self.tracker.init(frame, self.bbox)

class ID:
    def __init__(self, ssd_id, tracker_id, rate):
        self.ssd_id = ssd_id
        self.tracker_id = tracker_id
        self.rate = rate

class Callback(object):
    def __init__(self):
        self._ssd_sub = rospy.Subscriber("/ssd/BoxArray", BoundingBoxArray, self.ssdCallback)
        self._image_sub = rospy.Subscriber("/usb_cam/image_raw", Image, self.imageCallback)
        self._ssd_flag = False
        self._image_flag = False
        self._init_flag = False
        self.classes = []
        self.class_id = []
        self.id = 0

    def ssdCallback(self,msg):
        self.ssd = msg
        if self._image_flag:
            # Trackerの更新(追跡に失敗した場合削除)
            self.tracking()
            # 新しい検出があればそれを起点にtrackerを作成 
            self.registerTracker()
            # Visualize 
            self.show()

    def imageCallback(self, msg):
        self._image_flag = True
        self.image = CvBridge().imgmsg_to_cv2(msg, "bgr8")
        self.image_height = self.image.shape[0]     # y軸
        self.image_width  = self.image.shape[1]     # x軸
        self.image_channels = self.image.shape[2]
        self.frame = self.image.copy()

    def tracking(self):
        for (i,tracker) in enumerate(self.classes):
            tracker.n_miss_frame += 1
            tracker.ok , tracker.bbox = tracker.tracker.update(self.image)
            if tracker.ok:
                p1 = (int(tracker.bbox[0]), int(tracker.bbox[1]))
                p2 = (int(tracker.bbox[2]), int(tracker.bbox[3]))
                # tracker.n_miss_frame = 0
                cv2.rectangle(self.frame, p1, p2, (255,0,0), 2,1)
                cv2.putText(self.frame, "ID" + str(tracker.id) , p1, cv2.FONT_HERSHEY_SIMPLEX, 0.75,(0,0,255),2)
            else:
                self.classes.pop(i)

            if MAX_MISS_FRAME < tracker.n_miss_frame: 
                self.classes.pop(i)
        
    # 新しい検出を登録 現在のtrackingと近ければ受理してtrackingのn_miss_frameをリセット
    # そうでなければfalseで新しく登録 
    def registerNewDetect(self, bbox):
        max_rate = MIN_NEW_DETECT_INTERSECTION_RATE
        object_flag = False
        id = -1
        if bbox.Class == "person":
            # SSD
            b_rect = Rect(bbox.xmin, bbox.ymin, bbox.xmax, bbox.ymax)
            
            # 重なりがしきい値以上かつ最大のTracker IDを取得
            for track in self.classes:
                # Tracker
                c_rect = Rect(track.bbox[0], track.bbox[1], track.bbox[2], track.bbox[3])
                # 重なっているかを計算 
                overlap_flag = overlap(b_rect, c_rect)
                # 重なり率を計算
                if overlap_flag:
                    overlap_area = area(b_rect, c_rect)
                    rate = overlap_rate(b_rect, c_rect, overlap_area)
                    # 重なり率がしきい値以上かつ最大のTracker IDを取得
                    if max_rate < rate:
                        object_flag = True
                        max_rate = rate
                        id = track.id
            # 重なりが最大のTracker IDのn_miss_frameをリセット
            for track in self.classes:
                if track.id == id:
                    track.n_miss_frame = 0

        return object_flag

    # 新しい検出があればそれを起点にTrackerを作成
    def registerTracker(self):
        for bbox in self.ssd.boxes:
            if bbox.Class == 'person':
                is_registered = self.registerNewDetect(bbox)
                # 新しい検出をclassesに追加
                if not is_registered:
                    self.classes.append(BboxClass(bbox, self.image, self.id))
                    self.id += 1

    # visualize
    def show(self):
        for bbox in self.ssd.boxes:
            p1 = (int(bbox.xmin), int(bbox.ymin))
            p2 = (int(bbox.xmax), int(bbox.ymax))
            cv2.rectangle(self.frame, p1, p2, (0,0,255), 2,1)
        cv2.imshow("Track", self.frame)
        cv2.waitKey(1)


if __name__ =='__main__':
    rospy.init_node('ssd_tracker')
    rate = rospy.Rate(20)

    callback = Callback()
    
    while not rospy.is_shutdown():
        rate.sleep()
